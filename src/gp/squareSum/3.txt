3 Result: 3
Time: 0ms
4 Result: 1
Time: 0ms
5 Result: 2
Time: 0ms
6 Result: 3
Time: 0ms
7 Result: 4
Time: 0ms
8 Result: 2
Time: 0ms
9 Result: 1
Time: 0ms
10 Result: 2
Time: 0ms
21 Result: 3
Time: 0ms
31 Result: 4
Time: 0ms
41 Result: 2
Time: 0ms
51 Result: 3
Time: 0ms
61 Result: 2
Time: 0ms
71 Result: 4
Time: 0ms
81 Result: 1
Time: 0ms
91 Result: 3
Time: 0ms
101 Result: 2
Time: 0ms
1001 Result: 3
Time: 3ms
100001 Result: 3
Time: 750ms

====

class Perfect {
    HashMap<Integer,Integer> cache;
    Perfect() {
        cache = new HashMap<>();
    }
    int search(int n ) {
        // cache result
        if  (cache.containsKey(n)) {
            return cache.get(n);

        }
            int result=n;
        //  start from n^0.5
        int ceiling = (int)Math.sqrt(n);
            for (int i = ceiling; i>0 ; i--) {
                int temp = search(n - i*i);
                if (temp+1 < result) result = temp+1;

            }

        cache.put(n,result);
        return  result;
    }
}
public class Solution {
    public static void main(String[] args) throws FileNotFoundException {
        Scanner in = new Scanner(new File("src/gp/squareSum/input.txt"));
        int n = in.nextInt();
        Perfect perfect = new Perfect();
        while (n!= -1) {
            long start = System.nanoTime();

            System.out.println(n+ " Result: " + perfect.search(n));
            long end = System.nanoTime();
            System.out.println("Time: " + (end-start)/1000000 + "ms");
            n = in.nextInt();
        }

        in.close();

    }
}